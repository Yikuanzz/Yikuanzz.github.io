<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术与效率 on Yikuanzz</title>
    <link>https://yikuanzz.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%95%88%E7%8E%87/</link>
    <description>Recent content in 技术与效率 on Yikuanzz</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 17:38:22 +0800</lastBuildDate>
    <atom:link href="https://yikuanzz.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%95%88%E7%8E%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go协程交替打印</title>
      <link>https://yikuanzz.github.io/2025/go%E5%8D%8F%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0/</link>
      <pubDate>Fri, 28 Feb 2025 17:38:22 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2025/go%E5%8D%8F%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0/</guid>
      <description>（1）用协程交替打印 ABC 一百次； （2）用协程交替打印数字，0 到 100。 我们可以利用 Channel 的阻塞机制来进行信号传递，因为无缓冲的 Channel 中，如果没有数据传</description>
    </item>
    <item>
      <title>Go中os.OpenFile详解</title>
      <link>https://yikuanzz.github.io/2024/go%E4%B8%ADos.openfile%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 25 Sep 2024 11:22:32 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/go%E4%B8%ADos.openfile%E8%AF%A6%E8%A7%A3/</guid>
      <description>os.OpenFile() 在 Go 语言中，os.OpenFile 是一个底层文件操作函数，用于精细地控制文件的打开行为。 func OpenFile(name string, flag int, perm FileMode)(*Fiel, error) 参数解析： 1、name string</description>
    </item>
    <item>
      <title>Flexbox 弹性盒布局</title>
      <link>https://yikuanzz.github.io/2024/flexbox-%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sat, 21 Sep 2024 16:25:42 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/flexbox-%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80/</guid>
      <description>Flexbox（弹性盒布局）是一种用于布局的 CSS 模型，这也是最常使用的模型。我们通过 display: flex 来将其容器设置为 flex 布局，那么它的子元素就会根据布局进行</description>
    </item>
    <item>
      <title>RSS简明教程</title>
      <link>https://yikuanzz.github.io/2024/rss%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 19 Sep 2024 13:26:44 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/rss%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</guid>
      <description>RSS RSS（Really Simple Syndication） 是一种基于 XML 的内容聚合和发布格式。它允许用户在一个地方订阅和阅读来自多个网站的更新内容，而无</description>
    </item>
    <item>
      <title>IO多路复用机制</title>
      <link>https://yikuanzz.github.io/2024/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 26 Aug 2024 20:12:34 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6/</guid>
      <description>IO 多路复用详解 IO多路复用是一种高效的IO处理机制，允许单个线程同时监听和处理多个文件描述符（如网络连接、管道等）的IO事件。它是现代操作系</description>
    </item>
    <item>
      <title>Ubuntu 22.04 LTS 虚拟机互联</title>
      <link>https://yikuanzz.github.io/2024/ubuntu-22.04-lts-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%92%E8%81%94/</link>
      <pubDate>Sat, 17 Aug 2024 12:27:27 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/ubuntu-22.04-lts-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%92%E8%81%94/</guid>
      <description>背景环境 在我们需要进行集群部署的软件学习的时候，最必要的是搭建好一个服务器环境，其中的关键需求就是能够让服务器互联。因此，我写了这篇文章的重</description>
    </item>
    <item>
      <title>JavaScript的异步处理机制</title>
      <link>https://yikuanzz.github.io/2024/javascript%E7%9A%84%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 13 Aug 2024 11:28:49 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/javascript%E7%9A%84%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</guid>
      <description>JavaScript 是一种单线程语言，但通过其独特的运行机制和异步编程模型，能够高效地处理非阻塞任务。以下是 JavaScript 实现异步的核心原理及其相关技术细节。 1. JavaScript 的单线程</description>
    </item>
    <item>
      <title>软件架构场景</title>
      <link>https://yikuanzz.github.io/2024/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Sat, 27 Jul 2024 01:07:04 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%9C%BA%E6%99%AF/</guid>
      <description>冷热分离：表数据量大读写缓慢 背景信息 在海量大数据场景下，一张表中往往存储着大量的历史数据，如订单数据或者监控数据。随着时间的推移，这些数据被</description>
    </item>
    <item>
      <title>计算机网络学习</title>
      <link>https://yikuanzz.github.io/2024/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 21 May 2024 08:10:37 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/</guid>
      <description>概述 OSI 参考模型 网络通信是一个庞大的工程，其中网络协议就采用分层设计的思想。国际化标准组织提出了 开放式系统互联模型（open system interconnection model），</description>
    </item>
    <item>
      <title>消息队列学习</title>
      <link>https://yikuanzz.github.io/2024/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 19 Apr 2024 10:10:04 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0/</guid>
      <description>消息队列介绍 消息总线（Message Queue） ，是一种跨进程的通信机制，就是用于在应用程序之间传递消息的中间件。它把消息存储在一个队列中，</description>
    </item>
    <item>
      <title>网络数通入门</title>
      <link>https://yikuanzz.github.io/2024/%E7%BD%91%E7%BB%9C%E6%95%B0%E9%80%9A%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 18 Apr 2024 20:05:05 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E7%BD%91%E7%BB%9C%E6%95%B0%E9%80%9A%E5%85%A5%E9%97%A8/</guid>
      <description>基础技术 问题： 1、电脑浏览器是如何打开百度的？ 2、游戏客户端是如何连接服务器的？ 3、购物节，电商服务器是如何顶住压力的？ 网络设备 交换机：电脑</description>
    </item>
    <item>
      <title>RPC 学习</title>
      <link>https://yikuanzz.github.io/2024/rpc-%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 16 Apr 2024 19:31:08 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/rpc-%E5%AD%A6%E4%B9%A0/</guid>
      <description>RPC 简单介绍 RPC（Remote Procedure Call） 是远程过程调用协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据</description>
    </item>
    <item>
      <title>跨域问题</title>
      <link>https://yikuanzz.github.io/2024/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 15 Apr 2024 01:49:05 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
      <description>跨域 跨域问题是前端开发常见的一个问题，就是当一个网页或脚本试图请求另一个来源（域名、协议或端口）的资源时会产生的问题。 原因是：浏览的同源策略</description>
    </item>
    <item>
      <title>程序执行时的栈和堆</title>
      <link>https://yikuanzz.github.io/2024/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/</link>
      <pubDate>Fri, 12 Apr 2024 18:57:08 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E7%9A%84%E6%A0%88%E5%92%8C%E5%A0%86/</guid>
      <description>在 C语言中，程序运行时会存在 栈 和 堆 两种不同的内存分配方式。 接下来，我们从 内存分配方式 、内存地址增长 和 碎片 三个方面来对比 栈 和 堆。 内存分配方式 栈</description>
    </item>
    <item>
      <title>浅聊操作系统</title>
      <link>https://yikuanzz.github.io/2024/%E6%B5%85%E8%81%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 26 Mar 2024 20:28:49 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E6%B5%85%E8%81%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>操作系统简要 操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序，是计算机的基石。 操作系统本质上是一个运行在</description>
    </item>
    <item>
      <title>计组-计算机算术</title>
      <link>https://yikuanzz.github.io/2024/%E8%AE%A1%E7%BB%84-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%9C%AF/</link>
      <pubDate>Mon, 25 Mar 2024 10:55:32 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E8%AE%A1%E7%BB%84-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%9C%AF/</guid>
      <description>计算机内可以存储各种各样的数据，例如：文本数据、图片数据、音频数据、视频数据等等。 这些数据都会以 位（bit，或比特） 的形式储存在计算机内，并</description>
    </item>
    <item>
      <title>开发技术和模式</title>
      <link>https://yikuanzz.github.io/2024/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E5%92%8C%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 23 Mar 2024 20:46:07 +0800</pubDate>
      <guid>https://yikuanzz.github.io/2024/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E5%92%8C%E6%A8%A1%E5%BC%8F/</guid>
      <description>开发技术革新 CGI 通用网关接口 通用网关接口（Common Gateway Interface, CGI） 是一种Web服务器与外部应用程序之间进行数据交互的标准协议。 背景： 早期的We</description>
    </item>
  </channel>
</rss>
