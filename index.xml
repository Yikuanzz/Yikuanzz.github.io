<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Yikuanzz</title>
        <link>https://yikuanzz.github.io/</link>
        <description>Recent content on Yikuanzz</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 22 Mar 2024 20:27:09 +0800</lastBuildDate><atom:link href="https://yikuanzz.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MySQL</title>
        <link>https://yikuanzz.github.io/2024/mysql/</link>
        <pubDate>Fri, 22 Mar 2024 15:51:46 +0800</pubDate>
        
        <guid>https://yikuanzz.github.io/2024/mysql/</guid>
        <description>&lt;img src="https://yikuanzz.github.io/2024/mysql/cover.png" alt="Featured image of post MySQL" /&gt;&lt;h1 id=&#34;基础篇&#34;&gt;基础篇&lt;/h1&gt;
&lt;h2 id=&#34;mysql概述&#34;&gt;MySQL概述&lt;/h2&gt;
&lt;h3 id=&#34;数据库相关概念&#34;&gt;数据库相关概念&lt;/h3&gt;
&lt;p&gt;数据库（Data Base）：存储数据的仓库，并且是有组织的存储。&lt;/p&gt;
&lt;p&gt;数据库管理系统（Data Base Management System）：操纵和管理数据库的大型软件。&lt;/p&gt;
&lt;p&gt;SQL（Structured Query Language）：操作关系型数据库的编程语言。&lt;/p&gt;
&lt;h3 id=&#34;mysql-数据库&#34;&gt;MySQL 数据库&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 连接 MySQL
mysql -u username -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数据模型：客户端 &amp;raquo; 数据库管理系统 &amp;raquo; 数据库。&lt;/p&gt;
&lt;p&gt;关系型数据库（RDBMS）：由多张互相连接的二维表组成的数据库。&lt;/p&gt;
&lt;h2 id=&#34;sql&#34;&gt;SQL&lt;/h2&gt;
&lt;h3 id=&#34;sql-通用语法&#34;&gt;SQL 通用语法&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- 注释写法1 : 不区分大小写，关键字建议大写
# 注释写法2 : 可以使用缩进或空格
/*	注释写法3 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sql-分类&#34;&gt;SQL 分类&lt;/h3&gt;
&lt;p&gt;DDL（Data Definition Language）：定义数据库、表、字段。&lt;/p&gt;
&lt;p&gt;DML（Data Manipulation Language）：表中数据增、删、改。&lt;/p&gt;
&lt;p&gt;DQL（Data Query Language）：查询数据库表记录。&lt;/p&gt;
&lt;p&gt;DCL（Data Control Language）：创建数据库用户、控制数据库访问权限。&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;
&lt;p&gt;数值类型：&lt;/p&gt;
&lt;p&gt;TINYINT（1 byte）、SMALLINT（2 bytes）、MEDIUMINT（3 bytes）、INT（4 bytes）、BIGINT（8 bytes）、FLOAT（4 bytes）、DOUBLE（8 bytes）。&lt;/p&gt;
&lt;p&gt;字符串类型：&lt;/p&gt;
&lt;p&gt;CHAR、VARCHAR、TINYBLOB、TINYTEXT、BLOB、TEXT、MEDIUMBLOB、MEDIUMTEXT、LONGBLOB、LONGTEXT。&lt;/p&gt;
&lt;p&gt;日期类型：&lt;/p&gt;
&lt;p&gt;DATE（YYYY-MM-DD）、TIME（HH:MM:SS）、YEAR（YYYY）、DATETIME（YYYY-MM-DD HH:MM:SS）、TIMESTAMP（YYYY-MM-DD HH:MM:SS）&lt;/p&gt;
&lt;h3 id=&#34;ddl&#34;&gt;DDL&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;/* 数据库的操作 */
# 查询所有数据库
SHOW DATABASES;

# 查询当前数据库
SELECT DATABASE();

# 创建数据库
CREATE DATABSE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];

# 使用数据库 
USE 数据库名;

# 删除
DROP DATABASE [IF NOT EXISTS] 数据库名;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;/* 表操作 */
# 查询所有数据表
SHOW TABLES;

# 查询表结构
DESC 表名;

# 查询表的建表语句
SHOW CREATE TABLE 表名;

# 创建表
CREATE TABLE 表名(
    字段1 字段1类型[COMMENT 字段1注释],
	字段2 字段2类型[COMMENT 字段2注释],
    字段3 字段3类型[COMMENT 字段3注释],
)[COMMENT 表注释];

# 添加字段
ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释][约束];

# 修改数据类型
ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);

# 修改字段名和字段类型
ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];

# 删除字段
ALTER TABLE 表名 DROP 字段名;

# 修改表名
ALTER TABLE 表名 RENAME TO 新表名;

# 删除表
DROP TABLE [IF EXISTS] 表名;

# 删除指定表并重新创建该表
TRUNCATE TABLE 表名;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dml&#34;&gt;DML&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 给指定字段添加数据
INSERT INTO 表名(字段名1, 字段名2, ...) VALUES(值1, 值2, ...);

# 给全部字段添加数据
INSERT INTO 表名字 VALUES(值1, 值2, ...);

# 修改数据
UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [WHERE 条件];

# 删除数据
DELETE FROM 表名 [WHERE 条件];
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dql&#34;&gt;DQL&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SELECT
	字段列表
FROM
	表名列表
WHERE
	条件列表
GROUP BY
	分组字段列表
HAVING
	分组后条件列表
ORDER BY
	排序字段列表
LIMIT
	分页参数
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查询多个字段
SELECT 字段1, 字段2, 字段3 ... FROM 表名;
SELECT * FROM 表名;

# 设置别名
SELECT 字段1[AS 别名1], 字段2[AS 别名2] .. FROM 表名;

# 去除重复记录
SELECT DISTINCT 字段列表 FROM 表名;

# 查询没有身份证号的员工信息
SELECT * FROM emp WHERE idcard IS NULL;

# 查询 15岁 到 20岁 之间的员工信息
SELECT * FROM emp WHERE age &amp;gt;= 15 and age &amp;lt;= 20;
SELECT * FROM emp WHERE age BETWEEN 20 and 15;

# 查询年龄为 18岁 或 20岁 或 40岁 的员工信息
SELECT * FROM emp WHERE age = 18 OR age = 20 OR age = 40;
SELECT * FROM emp WHERE age IN(18, 20, 40);

# 查询姓名为两个字的员工信息
SELECT * FROM emp WHERE name LIKE &#39;__&#39;;

# 查询身份证最后一位是X的员工信息
SELECT * FROM emp WHERE idcard LIKE &#39;%X&#39;;

# 统计企业员工数据量
SELECT COUNT(*) FROM emp;

# 根据性别分组，统计男性员工和女性员工的数量
SELECT gender, count(*) FROM emp GROUP BY gender;

# 查询年龄小于 45岁 的员工，并根据工作地址分组，获取员工数量大于3的工作地址
SELECT workaddress, count(*) FROM emp WHERE age&amp;lt;45 GROUP BY workaddress HAVING count(*)&amp;gt;3;

# 根据年龄对公司的员工进行升序排序
SELECT * FROM emp ORDER BY age ASC;

# 根据入职时间对员工进行降序排序
SELECT * FROM emp ORDER BY entrydate DESC;

# 先按年龄升序排，年龄同的按入职时间降序排
SELECT * FROM emp ORDER BY age ASC, entrydate DESC;

# 查询第 1 页员工数据，每页展示 10 条记录
SELECT * FROM emp LIMIT 0, 10;

# 查询第 2 页员工数据，每页展示 10 条记录
SELECT * FROM emp LIMIT 10,10;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dcl&#34;&gt;DCL&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查询用户
USE mysql;
SELECT * FROM USER;

# 创建用户
CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;

# 修改用户密码
ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;

# 删除用户
DROP USER &#39;用户名&#39;@&#39;主机名&#39;;

# 查询权限
SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;

# 授予权限
GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;

# 撤销权限
REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;
&lt;h3 id=&#34;字符串函数&#34;&gt;字符串函数&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- concat
SELECT CONCAT(&#39;Hello &#39;, &#39;MySQL&#39;);

-- LOWER
SELECT LOWER(&#39;Hello&#39;);

-- UPPER
SELECT UPPER(&#39;Hello&#39;);

-- LPAD
SELECT LPAD(&#39;01&#39;, 5, &#39;-&#39;);

-- RPAD
SELECT RPAD(&#39;01&#39;, 5, &#39;-&#39;);

-- TRIM
SELECT TRIM(&#39; Hello MySQL &#39;);

-- SUBSTRIMG
SELECT SUBSTRING(&#39;Hello MySQL&#39;, 1, 5);

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数值函数&#34;&gt;数值函数&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- CEIL(x)
SELECT CEIL(1.1);

-- FLOOR(x)
SELECT FLOOR(1.9);

-- MOD(x,y)
SELECT MOD(3, 4);

-- RAND()
SELECT RAND();

-- ROUND(x,y)
SELECT ROUND(3.1415926, 2);

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;日期函数&#34;&gt;日期函数&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- CURDATE()
SELECT CURDATE();

-- CURTIME()
SELECT CURTIME();

-- NOW()
SELECT NOW();

-- YEAR, MONTH, DAY
SELECT YEAR(NOW());
SELECT MONTH(NOW());
SELECT DAY(NOW());

-- DATE_ADD(date, INTERVAL expr type)
SELECT DATE_ADD(NOW(), INTERVAL 70 DAY);

-- DATEDIFF(date1, date2)
SELECT DATEDIFF(&#39;2024-02-29&#39;, &#39;2023-11-11&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;流程函数&#34;&gt;流程函数&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- IF
SELECT IF(FALSE, &#39;OK&#39;, &#39;ERROR&#39;);

-- IFNULL
SELECT IFNULL(&#39;Get&#39;, &#39;DEFAULT&#39;);
SELECT IFNULL(&#39;&#39;, &#39;DEFATLT&#39;);
SELECT IFNULL(null, &#39;DEFATLT&#39;);

-- CASE WHEN[val1] THEN[res1] ... ELSE[default] END
SELECT name, CASE WHEN score &amp;gt;= 85 THEN &#39;优秀&#39; WHEN score &amp;gt;= 60 THEN &#39;及格&#39; ELSE &#39;不及格&#39; END FROM student_score;

-- CASE [expr] WHEN[val1] THEN[res1] ... ELSE[default] END
SELECT name, CASE workaddress WHEN &#39;北京&#39; THEN &#39;一线城市&#39; WHEN &#39;上海&#39; THEN &#39;一线城市&#39;ELSE &#39;二线城市&#39; END FROM emp; 

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;约束&#34;&gt;约束&lt;/h2&gt;
&lt;p&gt;约束包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、主键约束：每个表会有一个唯一标识表的字段。&lt;/li&gt;
&lt;li&gt;2、外键约束：表中的某字段由另外一个表的主键决定。&lt;/li&gt;
&lt;li&gt;3、唯一约束：确保该字段的每个字段值是唯一的，允许空值。&lt;/li&gt;
&lt;li&gt;4、检查约束：用于检查数据表中，字段值是否有效。&lt;/li&gt;
&lt;li&gt;5、非空约束：用来约束数据表中，字段值不能为空。&lt;/li&gt;
&lt;li&gt;6、默认值约束：当表中某字段不输入值时，自动为其添加设定好的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见约束&#34;&gt;常见约束&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE TABLE USER(
	id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;主键&#39;,
    name VARCHAR(10) NOT NULL UNIQUE COMMENT &#39;姓名&#39;,
    age INT CHECK(age &amp;gt; 0 AND age &amp;lt;= 120) COMMENT &#39;年龄&#39;,
    status CHAR(1) DEFAULT &#39;1&#39; COMMENT &#39;状态&#39;,
	gender CHAR(1) COMMENT &#39;性别&#39;
) COMMENT &#39;用户表&#39;;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;外键约束&#34;&gt;外键约束&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE TABLE emp(
    id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;主键&#39;,
    name VARCHAR(10) NOT NULL UNIQUE COMMENT &#39;姓名&#39;,
	age INT CHECK(age &amp;gt; 0 AND age &amp;lt;= 120) COMMENT &#39;年龄&#39;,
    salary INT CHECK(salary &amp;gt; 0) NOT NULL COMMENT &#39;薪资&#39;,
    entrydate NOT NULL COMMENT &#39;入职时间&#39;,
    managerid INT COMMENT &#39;直属领导ID&#39;,
    dept_id INT &#39;部门ID&#39;
) COMMENT &#39;员工表&#39;;

CREATE TABLE dept(
	id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;ID&#39;,
    name VARCHAR(50) NOT NULL COMMENT &#39;部门名称&#39;
) COMMENT &#39;部门表&#39;;

# 添加外键
ALTER TABLE emp ADD CONSTRAINT fk_emp_dept_id FOREIGN KEY (dept_id) REFERENCES dept(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE emp ADD CONSTRAINT fk_emp_dept_id FOREIGN KEY (dept_id) REFERENCES dept(id) ON UPDATE CASCADE ON DELETE SET NULL;

# 删除外键
ALTER TABLE emp DROP FOREIGN KEY fk_emp_dept_id;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多表查询&#34;&gt;多表查询&lt;/h2&gt;
&lt;h3 id=&#34;多表关系&#34;&gt;多表关系&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE TABLE student(
	id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;主键&#39;,
    name VARCHAR(10) COMMENT &#39;姓名&#39;,
    sid VARCHAR(10) COMMENT &#39;学号&#39;
) COMMENT &#39;学生表&#39;;

CREATE TABLE course(
	id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;主键&#39;,
    name VARCHAR(10) COMMENT &#39;课程名称&#39;
)COMMENT &#39;课程表&#39;;

CREATE TABLE student_course(
	id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;主键&#39;,
    studentid INT COMMENT &#39;学生ID&#39;,
    courseid INT COMMENT &#39;课程ID&#39;,
    CONSTRAINT fk_courseid FOREIGN KEY (courseid) REFERENCES course(id),
    CONSTRAINT fk_studentid FOREIGN KEY (studentid) REFERENCES student(id)
)COMMENT &#39;学生选课表&#39;;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;多表查询概述&#34;&gt;多表查询概述&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 多表查询 - 笛卡尔积
SELECT * FROM emp, dept WHERE emp.detp_id = dept.id;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;内连接&#34;&gt;内连接&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 内连接查询的是两张交集的部分
SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;
SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;外连接&#34;&gt;外连接&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 左外连接
SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件 ...;

# 右外连接
SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件 ...;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;自连接&#34;&gt;自连接&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 自连接可以是内连接也可以是外连接
SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;
SELECT 字段列表 FROM 表A 别名A LEFT[OR RIGHT] [OUTER] JOIN 表B 别名B ON 条件 ...;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;联合查询&#34;&gt;联合查询&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# UNION ALL 是不合并相同信息
SELECT * FROM emp WHERE salary &amp;lt; 5000
UNION ALL
SELECT * FROM emp WHERE age &amp;gt; 50;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;子查询&#34;&gt;子查询&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 嵌套查询就是子查询
SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);

# 查询销售部所有员工信息
SELECT * FROM emp WHERE dept_id = (SELECT id FROM dept WHERE name = &#39;销售部&#39;);

# 查询销售部和市场部所有员工信息
SELECT * FROM emp WHERE dept_id IN((SELECT id FROM dept WHERE name IN(&#39;销售部&#39;, &#39;市场部&#39;)));

# SOME、ANY、ALL 使用
# 比财务部所有人工资都高
SELECT * FROM emp WHERE salary &amp;gt; ALL(SELECT salary FROM emp WHERE dept_id = (SELECT id FROM dept WHERE name = &#39;财务部&#39;));

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;事务&#34;&gt;事务&lt;/h2&gt;
&lt;p&gt;事务：就是一组操作，不可分割单工作单位，将作为一个整体提交到系统。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;默认 MySQL 的事务是自动提交的，也就是，当执行一条 DML 语句， MySQL 会隐式地提交事务。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务操作&#34;&gt;事务操作&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查看、设置事务提交方式
SELECT @@autocommint;
SET @@autocommint = 0;

# 开启事务
START TRANSACTION;
BEGIN;

# 提交事务
COMMIT;

# 回滚事务
ROLLBACK;

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE TABLE account(
	ID INT AUTO_INCREMENT PRIMARY KEY  COMMENT &#39;主键&#39;,
	NAME VARCHAR(10) COMMENT &#39;姓名&#39;,
	MONEY INT COMMENT &#39;余额&#39;
) COMMENT &#39;账户表&#39;;
INSERT INTO account(ID, NAME, MONEY) VALUES (null, &#39;张三&#39;, 2000), (null, &#39;李四&#39;, 2000);

# 恢复数据
UPDATE account SET MONEY = 2000 WHERE NAME IN(&#39;张三&#39;, &#39;李四&#39;);

# 张三给李四转账 1000
# 1.查询张三账户余额
SELECT MONEY FROM account WHERE name = &#39;张三&#39;;
# 2.将张三用户余额 -1000
UPDATE account SET MONEY = MONEY - 1000 WHERE name = &#39;张三&#39;;
# 3.将李四用户余额 +1000
UPDATE account SET MONEY = MONEY + 1000 WHERE name = &#39;李四&#39;;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;事务特性&#34;&gt;事务特性&lt;/h3&gt;
&lt;p&gt;原子性（Atomicity）：事务不可分割。&lt;/p&gt;
&lt;p&gt;一致性（Consistency）：事务完成时，所有数据状态一致。&lt;/p&gt;
&lt;p&gt;隔离性（Isolation）：保证事务在不受并发操作下独立运行。&lt;/p&gt;
&lt;p&gt;持久性（Durabiliry）：事务一旦提交或回滚，数据改变是永久的。&lt;/p&gt;
&lt;h3 id=&#34;并发事务&#34;&gt;并发事务&lt;/h3&gt;
&lt;p&gt;脏读：一个事务读到另一个事务还没有提交的数据。&lt;/p&gt;
&lt;p&gt;不可重复读：一个事务先后读取同一条记录，但是两次读取的数据不同。&lt;/p&gt;
&lt;p&gt;幻读：查询时没有对应数据行，但插入数据时数据又存在。&lt;/p&gt;
&lt;h3 id=&#34;事务隔离级别&#34;&gt;事务隔离级别&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;隔离级别&lt;/th&gt;
&lt;th&gt;脏读&lt;/th&gt;
&lt;th&gt;不可重复读&lt;/th&gt;
&lt;th&gt;幻读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Read uncommitted&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read committed&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repeatable Read (Default)&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Serializable&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查看事务隔离级别
SELECT @@TRANSACTION_ISOLATION;

# 设置事务隔离级别
SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE};

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;进阶篇&#34;&gt;进阶篇&lt;/h1&gt;
&lt;h2 id=&#34;linux-mysql-使用&#34;&gt;Linux MySQL 使用&lt;/h2&gt;
&lt;h3 id=&#34;mysql-服务&#34;&gt;MySQL 服务&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 启动
systemctl start mysqld

# 重启
systemctl restart msyqld

# 停止
systemctl stop mysqld


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查询自动生成的-root-密码&#34;&gt;查询自动生成的 root 密码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;grep &#39;temporary password&#39; /var/log/mysqld.log


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改-root-密码&#34;&gt;修改 root 密码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 设置密码复杂度和密码长度
SET GLOBAL VALIDATE_PASSWORD.policy = 0;
SET GLOBAL VALIDATE_PASSWORD.length = 4;

# 修改密码
ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;1234&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;创建用户&#34;&gt;创建用户&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;1234&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;分配所有权限&#34;&gt;分配所有权限&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;grant all on *.* to &#39;root&#39;@&#39;%&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;存储引擎&#34;&gt;存储引擎&lt;/h2&gt;
&lt;h3 id=&#34;mysql-体系结构&#34;&gt;MySQL 体系结构&lt;/h3&gt;
&lt;p&gt;MySQL 客户端 &amp;laquo; === &amp;raquo; MySQL Server （连接层 + 服务层 + 引擎层 + 存储层）&lt;/p&gt;
&lt;p&gt;MySQL Server = 连接池 + 系统管理工具 + SQL 接口 + 解析器 + 查询优化器 + 缓存 + 可插拔存储引擎 + 系统文件 + 文件和日志&lt;/p&gt;
&lt;h3 id=&#34;存储引擎简介&#34;&gt;存储引擎简介&lt;/h3&gt;
&lt;p&gt;存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储殷勤是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建表时指定存储引擎
CREATE TABLE 表名(

)ENGINE = INNODB；

# 查询数据库支持的存储引擎
SHOW ENGINES；


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;存储引擎特点&#34;&gt;存储引擎特点&lt;/h3&gt;
&lt;p&gt;InnoDB：高可靠性和高性能的通用存储引擎。&lt;/p&gt;
&lt;p&gt;xxx.ibd：xxx 代表表名，innoDB 引擎每张表都会对应一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。&lt;/p&gt;
&lt;p&gt;Tablespace -&amp;gt; Segment -&amp;gt; EXtent -&amp;gt; Page -&amp;gt; Row (Trx id + Roll Pointer + col1 + col2 + col3 + &amp;hellip;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DML 操作遵循 ACID 模型，支持事务；&lt;/li&gt;
&lt;li&gt;行级锁，提高并发访问性能；&lt;/li&gt;
&lt;li&gt;支持外键 FOREIGN KEY 约束，保证数据的完整性和正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MyISAM：MySQL 早期默认存储引擎。&lt;/p&gt;
&lt;p&gt;xxx.sdi：存储表结构信息。&lt;/p&gt;
&lt;p&gt;xxx.MYD：存储数据。&lt;/p&gt;
&lt;p&gt;xxx.MYI：存储索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持事务，不支持外键；&lt;/li&gt;
&lt;li&gt;支持表锁，不支持行锁；&lt;/li&gt;
&lt;li&gt;访问速度快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Memoery：表数据存储在内存中，只做临时表或缓存。&lt;/p&gt;
&lt;p&gt;xxx.sdi：存储表结构信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存存放；&lt;/li&gt;
&lt;li&gt;hash 索引（默认）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储引擎选择&#34;&gt;存储引擎选择&lt;/h3&gt;
&lt;p&gt;InnoDB：对事务完整性要求高，并发条件下数据的一致性，除了插入和查询外，还包含很多更新、删除，则选该引擎。&lt;/p&gt;
&lt;p&gt;MyISAM：以读取和插入为主，很少更新和删除操作，对事务完整性、并发性要求不是很高，就用该引擎。&lt;/p&gt;
&lt;p&gt;MEMORY：访问速度快，但大小有限制，因为是临时存储也无法保证数据的安全性。&lt;/p&gt;
&lt;h2 id=&#34;索引&#34;&gt;索引&lt;/h2&gt;
&lt;h3 id=&#34;索引概述&#34;&gt;索引概述&lt;/h3&gt;
&lt;p&gt;索引（Index） ： 是帮助 MySQL 高效获取数据的数据结构。数据之外，数据库管理系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：提高检索的效率，降低数据库的 IO 成本；通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗；&lt;/li&gt;
&lt;li&gt;缺点：索引列也是要占用空间的；索引提高了查询效率，同时也降低了更新表的速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引结构&#34;&gt;索引结构&lt;/h3&gt;
&lt;p&gt;MySQL 的索引是在存储引擎层实现的，不同的存储引擎有不同的结构：&lt;/p&gt;
&lt;p&gt;B+Tree：最常见的索引类型，大部分引擎支持。&lt;/p&gt;
&lt;p&gt;Hash：底层数据用哈希表实现，只有精确匹配索引列查询才有效。&lt;/p&gt;
&lt;p&gt;R-tree：空间索引为MyISAM引擎的特殊索引类型，主要用于地理空间数据类型。&lt;/p&gt;
&lt;p&gt;Full-text：一种通过建立倒排索引，快速匹配文档的方式。&lt;/p&gt;
&lt;p&gt;二叉树：顺序插入到时候，会形成一个链表，查询性能会大大降低，大数据量情况下，层级较深，检索速度慢。&lt;/p&gt;
&lt;p&gt;红黑树：大量数据情况下，层级深，检索速度慢。&lt;/p&gt;
&lt;p&gt;B-Tree：（最大度数为 5 的 b-tree 每个节点存 4 个 key）。&lt;/p&gt;
&lt;p&gt;B+-Tree：所有的数据都有在叶子节点形成单向链表，非叶子节点起到索引的作用。&lt;/p&gt;
&lt;p&gt;MySQL 索引在经典 B+Tree 进行了优化，增加了一个指向相邻叶子节点的链表指针。&lt;/p&gt;
&lt;p&gt;Hash 索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，再映射到对应的槽位上，然后存储在 hash 表中。如果两个或多个键值，映射到相同的位置上，就产生了哈希冲突，可以通过链表来解决。&lt;/p&gt;
&lt;p&gt;Hash的特点：不支持范围搜索，无法通过索引完成排序，查询效率高。&lt;/p&gt;
&lt;p&gt;Memory 引擎支持 hash 索引，而 InnoDB 自适应 hash 功能。&lt;/p&gt;
&lt;p&gt;为什么 InnoDB 用 B+tree 索引结构？&lt;/p&gt;
&lt;p&gt;相对于二叉树，层级更少，搜索的效率高；&lt;/p&gt;
&lt;p&gt;对于 B-tree ，因为他叶子和非叶子都保存数据，这样一个页内存储的键值对少，如果要保存大量数据，只能增加树都高度；&lt;/p&gt;
&lt;p&gt;相对于 Hash 索引，B+tree 支持范围匹配和排序操作。&lt;/p&gt;
&lt;h3 id=&#34;索引分类&#34;&gt;索引分类&lt;/h3&gt;
&lt;p&gt;主键索引：针对表中主键创建的索引，默认自动创建。PRIMARY。&lt;/p&gt;
&lt;p&gt;唯一索引：避免同一个表中某数据列中的值重复，可以有多个。UNIQUE。&lt;/p&gt;
&lt;p&gt;常规索引：快速定位特定数据，可以有多个。&lt;/p&gt;
&lt;p&gt;全文索引：全文索引查找的是文本中的关键词，可以有多个。FULLTEXT。&lt;/p&gt;
&lt;p&gt;在 InnoDB 存储引擎中，根据索引的存储形式，还可以划分：&lt;/p&gt;
&lt;p&gt;聚群索引（Clustered Index）将数据与索引放到一块，索引结构的叶子节点保存了数据。必须有，且只一个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果存在主键，主键索引就是聚集索引。&lt;/li&gt;
&lt;li&gt;如果不存在主键，将使用第一个 UNIQUE 索引作为聚集索引。&lt;/li&gt;
&lt;li&gt;如果都没有，则 InnoDB 自动生成 rowid 为隐藏的聚集索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二级索引（Secondary Index）将数据与索引分开存储，索引结构的叶子节点关联对应主键。可以存在多个。&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;SELECT * FROM USER WHERE NAME=&#39;Arm&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1、进行 NAME 字段的二级索引，找到对应的 ID；&lt;/p&gt;
&lt;p&gt;2、根据 ID 进行回表查询，即聚集索引找到 ID 下那一行的数据。&lt;/p&gt;
&lt;h3 id=&#34;索引语法&#34;&gt;索引语法&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建索引
CREATE [UNIQUE | FULLTEXT] INDEX index_name ON table_name (index_col_name, ...);

# 查看索引
SHOW INDEX FROM table_name;

# 删除索引
DROP INDEX index_name ON table_name;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sql-性能分析&#34;&gt;SQL 性能分析&lt;/h3&gt;
&lt;p&gt;SQL 执行频率：&lt;code&gt;SHOW [SESSION|GLOBAL] STATUS; &lt;/code&gt; 可以查看数据库指令的访问频次。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SHOW GLOBAL STATUS LIKE &#39;com______&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;慢查询日志：它记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认 10 秒）的所有 SQL 语句的日志。MySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件（/etc/my.cnf）中配置信息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 开启 MySQL 慢日志查询
slow_query_log = 1

# 设置超 2 秒就视为慢查询
long_query_time = 2

# 重启后，慢查询日志
SHOW VARIABLES LIKE &#39;slow_query_log&#39;;

# 生成文件 /var/lib/mysql/localhost-slow.log


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show profiles 能够在 SQL 优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看见 MySQL 是否支持 profile 操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 默认关闭，通过 SET 在 session / global 开启
SET profiling = 1;

# 查看 profiles 是否开启
SELECT @@have_profiling;

# 查看每一条 SQL 的耗时基本情况
SHOW profiles;

# 查看指定 query_id 的 SQL 语句各个阶段的耗时情况
SHOW profile FOR query query_id;

# 查看指定 query_id 的 SQL 语句 CPU 使用情况
SHOW profile cpu FOR query query_id;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EXPLAIN 或 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接或连接的顺序。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 直接在 SELECT 语句前加上关键字 explain / desc
EXPLAIN SELECT 字段 FROM 表名 WHERE 条件;

/*
	id 相同，从上到下顺序执行；不同则值大的先执行。
	select_type 表示 SELECT 类型。
	tyep 表连接类型，性能好到差为 NULL、system、const、eq_ref、ref、range、index、all。
	possible_key 显示可能应用这个表上的索引，一个或多个。
	key 为实际使用的索引。
	key_len 索引中使用的字节数，即索引字段最大可能值。
	rows MySQL 认为必须要执行查询的行数，这是估计值。
	filtered 表示返回结果的行数占所需读取行数的百分比，值越大越好。
*/


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;索引使用&#34;&gt;索引使用&lt;/h3&gt;
&lt;p&gt;验证索引效率&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 未建立索引前执行 SQL
SELECT * FROM tb_sku WHERE sn = &#39;100000003145001&#39;;
# 针对字段建立索引
CREATE INDEX idx_sku_sn ON tb_sku(sn);
# 再次执行
SELECT * FROM tb_sku WHERE sn = &#39;100000003145001&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最左前缀法：如果进行了联合索引，要遵循最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将部分失效（后面的字段索引失效）。&lt;/p&gt;
&lt;p&gt;范围查询：联合索引中，出现范围查询（&amp;gt;, &amp;lt;），范围查询右侧的列索引失效。在业务允许的情况，尽量使用 &amp;gt;= 或 &amp;lt;=。&lt;/p&gt;
&lt;p&gt;索引列运算：不要在索引列上进行运算操作，索引将失效。此外，如果字符串不加引号，也不会走索引的。&lt;/p&gt;
&lt;p&gt;模糊查询：如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失败。&lt;/p&gt;
&lt;p&gt;or 连接条件：如果 or 前字段有索引，而后面的没有索引，则不会用到索引。&lt;/p&gt;
&lt;p&gt;数据分布影响：如果 MySQL 评估使用索引比全表更慢，则不使用索引。&lt;/p&gt;
&lt;p&gt;SQL 提示：就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# USE INDEX
explain select * from tb_user use index(idx_user_pro) where profession=&#39;软件工程&#39;;

# IGNORE INDEX
explain select * from tb_user ignore index(idx_user_pro) where profession=&#39;软件工程&#39;;

# FORCE
explain select * from tb_user force index(idx_user_pro) where profession=&#39;软件工程&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;覆盖索引：尽量使用覆盖索引（查询使用了索引，且需要返回的列，在该索引中已经全部能够找到），减少 select *。&lt;/p&gt;
&lt;p&gt;using index condition ： 查找使用了索引，但是需要回表查询数据。&lt;/p&gt;
&lt;p&gt;using where; using index ：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据。&lt;/p&gt;
&lt;p&gt;前缀索引：当字段类型为字符串时，要索引很长的字符串，这样会浪费磁盘IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以节约索引空间。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE INDEX idx_xxx ON table_name(column(n));

# 前缀长度：不重复数据 和 总数据的比值
SELECT count(distinct email)/count(*) FROM tb_user;
SELECT count(distinct substring(email, 1,5)) / count(*) FROM tb_user;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;单列索引：即一个索引只包含单个列。&lt;/p&gt;
&lt;p&gt;联合索引：即一个索引包含了多个列。&lt;/p&gt;
&lt;p&gt;业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 单列索引情况 MysQL 优化器会自动评估哪个字段的索引效率更高
EXPLAIN select id,phone,name from tb_user where phone=&#39;12314123&#39; and name = &#39;李白&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;索引设计原则&#34;&gt;索引设计原则&lt;/h3&gt;
&lt;p&gt;1、数据量大，且查询比较频繁就建立索引；&lt;/p&gt;
&lt;p&gt;2、针对尝作为查询、排序、分组的字段建立索引；&lt;/p&gt;
&lt;p&gt;3、选择区分度高的建立索引，尽量建立唯一索引；&lt;/p&gt;
&lt;p&gt;4、字符串类型字段可建立前缀索引；&lt;/p&gt;
&lt;p&gt;5、尽量使用联合索引，很多时候可以覆盖索引；&lt;/p&gt;
&lt;p&gt;6、控制索引数量，维护索引结构代价要考虑；&lt;/p&gt;
&lt;p&gt;7、索引列不能存储NULL值，就用NOT NULL进行约束。&lt;/p&gt;
&lt;h2 id=&#34;sql-优化&#34;&gt;SQL 优化&lt;/h2&gt;
&lt;h3 id=&#34;插入数据&#34;&gt;插入数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- 批量插入
INSERT INTO tb_test VALUES (1, &#39;Tom&#39;), (2, &#39;Cat&#39;);

-- 手动提交事务
START TRANSACTION;
INSERT INTO tb_test VALUES (1, &#39;Tom&#39;), (2, &#39;Cat&#39;);
INSERT INTO tb_test VALUES (3, &#39;Jerry&#39;), (4, &#39;Mike&#39;);
COMMIT;

-- 主键顺序插入


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- 大批量插入
# 连接服务器
mysql --local-infile -u root -p

# 设置变量，从本地加载文件导入数据
SET GLOBAL local_infile = 1;

# 执行 load 指令，加载数据到表
load data local infile &#39;/root/sql1.log&#39; into table &#39;tb_user&#39; fields terminated by &#39;,&#39; lines terminated by &#39;\n&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;主键优化&#34;&gt;主键优化&lt;/h3&gt;
&lt;p&gt;在 InnoDB 存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为 索引组织表（index organized table IOT）。&lt;/p&gt;
&lt;p&gt;逻辑结构为：TableSpace &amp;gt; Segement &amp;gt; Extend &amp;gt; Page &amp;gt; Row。&lt;/p&gt;
&lt;p&gt;页可以为空，也可以填充一半。每个页包含了 2-N 行数据，如果一行数据太大会行溢出，是根据主键排序的。&lt;/p&gt;
&lt;p&gt;页分裂：主键乱序插入的时候会新建一个页空间，将原有的页一分为二，然后插入新数据。&lt;/p&gt;
&lt;p&gt;页合并：当页删除记录达到 MERGE_THRESHOLD，会查找前后页是否可以进行合并。&lt;/p&gt;
&lt;p&gt;设计原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;满足业务需求的情况下，尽量降低主键的长度；&lt;/li&gt;
&lt;li&gt;插入数据尽量顺序插入，选择 AUTO_INCREMENT；&lt;/li&gt;
&lt;li&gt;尽量不用 UUID 做主键或是其他自然主键，如身份证号；&lt;/li&gt;
&lt;li&gt;业务操作时，尽量不对主键修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;order-by-优化&#34;&gt;order by 优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Using filesort：通过表索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。&lt;/li&gt;
&lt;li&gt;Using index：通过有序索引顺序扫描直接返回有序数据，不需要额外排序。&lt;/li&gt;
&lt;li&gt;可以通过指定索引时排序字段的升降序，来进行优化；&lt;/li&gt;
&lt;li&gt;注意要遵循左前缀法进行索引。&lt;/li&gt;
&lt;li&gt;如果要 filesort 可以适当增加排序缓冲区大小 sort_buffer_size。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;group-by-优化&#34;&gt;group by 优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分组操作时，可以通过索引来提高效率。&lt;/li&gt;
&lt;li&gt;分组操作时，索引的使用也是满足最左前缀法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;limit-优化&#34;&gt;limit 优化&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 不直接使用 limit 获取全部数据，而是只获取 id 然后再作为表查询
SELECT s.* FROM tb_sku s, (SELECT id FROM tb_sku ORDER BY id LIMIT 9000000, 10) a WHERE s.id = a.id;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;count-优化&#34;&gt;count 优化&lt;/h3&gt;
&lt;p&gt;MyISAM 引擎会把一个表的总行数存在磁盘上；InnoDB 引擎则需要一行一行地计算。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 效率排行 ：count(*) &amp;gt; count(1) &amp;gt; count(主键) &amp;gt; count(字段)


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update优化&#34;&gt;update优化&lt;/h3&gt;
&lt;p&gt;InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。&lt;/p&gt;
&lt;h2 id=&#34;视图存储过程触发器&#34;&gt;视图/存储过程/触发器&lt;/h2&gt;
&lt;h3 id=&#34;视图&#34;&gt;视图&lt;/h3&gt;
&lt;p&gt;视图（View）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。其实，视图就是保留了 SQL 逻辑，不保存查询结果。&lt;/p&gt;
&lt;p&gt;WITH CHECK OPTION 子句创建时，MySQL 会检查正在更改的行是否符合视图的定义。MySQL 允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查范围，MySQL 提供了两个选项： CASCADED（默认） 和 LOCAL。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建
CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [with cascaded check option]; 

# 查询
SHOW CREATE VIEW 视图名称;
SELECT * FROM 视图名称 ...;

# 修改
CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句。
ALTER VIEW 视图名称[(列名列表)] AS SELECT语句。

# 删除
DROP VIEW [IF EXISTS] 视图名;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;视图若包含一下项则不可更新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、聚合函数或窗口函数（SUM()、MIN()、MAX()、COUNT()等）；&lt;/li&gt;
&lt;li&gt;2、DISTINCT、GROUP BY、HAVING、UNION 或 UNION ALL。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经常使用的查询可以被定义为视图，从而用户不必每次操作都指定操作来进行查询了；&lt;/li&gt;
&lt;li&gt;数据库授权，通过视图用户只能查询和修改所能见到的数据；&lt;/li&gt;
&lt;li&gt;视图可以帮助用户屏蔽真实表结构变化带来的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储过程&#34;&gt;存储过程&lt;/h3&gt;
&lt;p&gt;存储过程就是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。&lt;/p&gt;
&lt;p&gt;存储过程思想上，就是数据库 SQL 语句层面的代码封装与重用。可以接收参数，也可以返回数据，减少网络交互，提高效率。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建
# 通过关键字 delimiter 指定 SQL 语句结束符
/*
delimiter $$
CREATE PROCEDURE 存储过程名称([参数列表])
BEGIN
	-- SQL 语句
END$$
*/
CREATE PROCEDURE 存储过程名称([参数列表])
BEGIN
	-- SQL 语句
END;

# 调用
CALL 名称([参数]);

# 查看
SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = &#39;xxx&#39;;
SHOW CREATE PROCEDURE 存储过程名称;

# 删除
DROP PROCEDURE [IF EXISTS] 存储过程名称;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;系统变量 是 MySQL 服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话变量（SESSIOM）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认是改变 SESSION 变量。&lt;/li&gt;
&lt;li&gt;MySQL 服务器重启后，设置的全局参数会失效，想要不失效，可以在 /etc/my.cnf 中配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查看系统变量
SHOW [SESSION|GLOBAL] VARIABLES;
SHOW [SESSION|GLOBAL] VARIABLES LIKE ...;
SELECT @@[SESSION|GLOBAL] 系统变量名;

# 设置系统变量
SET [SESSION|GLOBAL] 系统变量名 = 值;
SET @@[SESSION|GLOBAL] 系统变量名 = 值;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用户定义变量 是用户根据自己定义的变量，用户变量不用提前声明，在用的时候直接用 &amp;ldquo;@变量名&amp;rdquo; 使用。其作用域为当前连接。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 赋值
SET @var_name = expr;
SET @var_name := expr;
SELECT @var_name := expr;
SELECT 字段名 INTO @var_name FROM 表名;
# 使用
SELECT @var_name;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;局部变量 根据需要定义的在局部生效的变量，访问之前，需要 DECLARE 声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的 BEGIN &amp;hellip; END 块。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 声明
DECLARE 变量名 变量类型 [DEFAULT ...];
# 赋值
SET 变量名 = 值;
SET 变量名 := 值;
SELECT 字段名 INTO 变量名 FROM 表名 ...;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# if 语句
IF 条件1 THEN
...
ELSEIF 条件2 THEN	
...
ELSE
...
END IF;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;#  参数 IN、OUT、INOUT
CREATE PROCEDURE 存储过程名称([IN/OUT/INOUT 参数名 参数类型])
BEGIN
	-- SQL 语句
END;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# case 语句
CASE case_value
	WHEN when_value1 THEN statement_list1
	...
END CASE;

CASE
	WHEN search_condition1 THEN statement_list1
	...
END CASE;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# while 语句
WHILE 条件 DO
	SQL 逻辑
END WHILE;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# repeat 语句
REPEAT
	SQL 逻辑
	UNTIL 条件
END REPEAT;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# loop 函数
# LEAVE：退出循环；ITERATE：跳过当前循环，进入下次循环。
[begin_label:]LOOP
	SQL 逻辑
END LOOP [end_label];

CREATE PROCEDURE pp(IN n INT)
BEGIN
	DECLARE total INT DEFAULT 0;
	
	sum:LOOP
		IF n &amp;lt;= 0 THEN
			LEAVE sum;
		END IF;
		
		SET total := total + n;
		SET n := n - 1;
	END LOOP sum;
	SELECT total;
END;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;/* 
	游标（CURSOR）用来存储查询结果集的数据类型，
	在存储过程和函数中可使用游标对结果集进行循环处理。
*/
# 游标声明
DECLARE 游标名称 CURSOR FOR 查询语句;
# 打开游标
OPEN 游标名称;
# 获取游标记录(循环获取)
FETCH 游标名称 INTO 变量;
# 关闭游标
CLOSE 游标名称;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 条件处理程序 Handler
# handler_action：CONTINUE 继续执行当前程序、EXIT 终止执行当前程序。
# SQLSTATE sqlstate_value 状态码、SQLWARNING 以01开头的SQLSTATE代码简写、NOT FOUND 以02开头的SQLSTATE代码简写、SQLEXCEPTION 其他。
DECLARE handler_action HANDLER FOR condition_value statement;

DECLARE exit HANDLER FOR SQLSTATE &#39;02000&#39; CLOSE u_cursor;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;存储函数&#34;&gt;存储函数&lt;/h3&gt;
&lt;p&gt;存储函数是有返回值的存储过程，存储函数的参数只能是 IN 类型的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;/*
	DETREMINISTIC：相同的输入参数总是产生相同的结果;
	NO SQL：不包含 SQL 语句;
	READS SQL DATA：包含连续读取数据的语句，但不包含写入数据语句。
*/
CREATE FUNCTION 存储函数名称([参数列表])
RETURNS type [characteristic ...]
BEGIN
	-- SQL 语句
	RETURN ...;
END;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;触发器&#34;&gt;触发器&lt;/h3&gt;
&lt;p&gt;触发器是与表有关的数据库对象。在 insert/update/delete 之前或之后，触发并执行触发器中定义的 SQL 语句集合。&lt;/p&gt;
&lt;p&gt;触发器可以协助应用在数据库端保证数据的完整性，日记记录，数据校验等操作。&lt;/p&gt;
&lt;p&gt;OLD 和 NEW 引用触发器中变化的记录内容。支持行级触发。&lt;/p&gt;
&lt;p&gt;INTER 型触发器：NEW 表示将要或者已经新增的数据；&lt;/p&gt;
&lt;p&gt;UPDATE 型触发器：OLD 表示修改之前的数据，NEW 表示将要或已经修改后的数据。&lt;/p&gt;
&lt;p&gt;DELETE 型触发器：OLD 表示将要或已经删除的数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建
CREATE TRIGGER trigger_name
BEFORE / AFTER INSERT / UPDATE / DELETE
ON table_name FOR EACH ROW
BEGIN
	triggle_statement;
END;
# 查看
SHOW TRIGGERS;
# 删除
DROP TRIGGER [schema_name.]trigger_name;


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;-- 通过触发器记录 tb_user 表的变更数据，将变更日志插入到日志表 user_logs 中，包含增加、修改、删除
# 日志表 user_log
create table user_logs(
	id int(11) not null auto_increment;
    operation varchar(20) not null comment &#39;操作类型&#39;,
    operation_tim datetime not null comment &#39;操作时间&#39;,
    operate_id int(11) not null comment &#39;操作ID&#39;,
    operate_params varchar(500) comment &#39;操作参数&#39;,
    primary key(id)
)engine=innodb default charset=utf8;

# 插入数据触发器
create trigger tb_user_insert_trigger
	after insert on tb_user for each row
begin
	insert into user_logs(id, operation, operate_time, operate_id, operate_params) values (null, &#39;insert&#39;, now(), new.id, concat(&#39;插入的数据内容为：id=&#39;, new.id, &#39;, name=&#39;, new.name, &#39;, phone=&#39;, new.phone, &#39;, email=&#39;, new.email))
end;

# 更新数据触发器
create trigger tb_user_update_trigger
	after insert on tb_user for each row
begin
	insert into user_logs(id, operation, operate_time, operate_id, operate_params) values (null, &#39;update&#39;, now(), new.id, concat(&#39;更新前内容为：id=&#39;, old.id, &#39;, name=&#39;, old.name, &#39;, phone=&#39;, old.phone, &#39;, email=&#39;, old.email,&#39;更新后内容为：id=&#39;, new.id, &#39;, name=&#39;, new.name, &#39;, phone=&#39;, new.phone, &#39;, email=&#39;, new.email))
end;


&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;锁&#34;&gt;锁&lt;/h2&gt;
&lt;p&gt;锁是计算机协调多个进程或线程并发访问某一资源的机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局锁：锁定数据库中的所有表。&lt;/li&gt;
&lt;li&gt;表级锁：每次操作都锁住整张表。&lt;/li&gt;
&lt;li&gt;行级锁：每次操作锁住对应的行数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;全局锁&#34;&gt;全局锁&lt;/h3&gt;
&lt;p&gt;加锁后，整个实例就处于只读状态。&lt;/p&gt;
&lt;p&gt;典型场景为全库数据的逻辑备份，对所有表进行锁定。&lt;/p&gt;
&lt;p&gt;1、如果在主库备份，那么备份期间数据不能更新，业务基本停摆；&lt;/p&gt;
&lt;p&gt;2、如果在从库备份，那么备份期间无法执行主库同步过来的二进制日志，主从不一致。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 不加锁一致性数据备份
mysqldump --single-transaction -h [address] -uroot -p1234 TestDB &amp;gt; TestDB.sql;
# 加锁
flush tables with read lock;

# 备份
mysqldump -h [address] -uroot -p1234 TestDB &amp;gt; TestDB.sql;

# 解锁
unlock tables;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;表级锁&#34;&gt;表级锁&lt;/h3&gt;
&lt;p&gt;锁定粒度大，发生锁冲突的概率最高，并发度最低。&lt;/p&gt;
&lt;p&gt;主要有这几类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表锁
&lt;ul&gt;
&lt;li&gt;表共享读锁（read lock）：不会阻塞其他客户端的读，但会阻塞写。&lt;/li&gt;
&lt;li&gt;表独享写锁（write lock）：写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;元数据锁（meta data lock）：系统自动控制，维护表元数据的一致性，在表上有活动事务时，不可以对元数据进行写入操作。&lt;/li&gt;
&lt;li&gt;意向锁：避免行锁和表锁冲突，用意向锁使表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。
&lt;ul&gt;
&lt;li&gt;意向共享锁（IS）：与表共享锁（read）兼容，与表共享锁（read）互斥。&lt;/li&gt;
&lt;li&gt;意向排他锁（IX）：与表共享锁（read）和表共享锁（read）都互斥。意向锁之间不互斥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;/*
	当开启事务时，就不能对元数据进行操作，只有事务结束了才能操作。
	一般来说，读数据是可以加表锁；而改数据是不能加表锁的。
*/
# 表锁
LOCK TABLES 表名 READ / WRITE;
UNLOCK TABLES / 客户端断开连接;

# 加锁
SELECT 语句 LOCK IN SHARE MODE;

# 查看元数据锁
SELECT * FROM performance_schema.metadata_locks;

# 查看意向锁和行锁
SELECT * FROM performance_schema.data_locks;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;行级锁&#34;&gt;行级锁&lt;/h3&gt;
&lt;p&gt;行级锁，每次操作锁对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。&lt;/p&gt;
&lt;p&gt;InooDB 的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对应记录加的锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此进行 update 和 delete。在 RC、RR 隔离级别下都支持。&lt;/li&gt;
&lt;li&gt;间隙锁（Gap Lock）：锁定索引记录间隙，确保索引记录间隙不变，防止其他事务在间隙进行 insert ，产生幻读。在 RR 隔离级别下都支持。&lt;/li&gt;
&lt;li&gt;临键锁（Next-Key-LOCK）：行锁和同隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;共享锁（S）：允许一个事务去读一行，组织其他事务获取相同数据集的排他锁。&lt;/p&gt;
&lt;p&gt;排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务活得相同的数据集的共享锁和排他锁。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL&lt;/th&gt;
&lt;th&gt;行锁类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;INSERT&lt;/td&gt;
&lt;td&gt;排他锁&lt;/td&gt;
&lt;td&gt;自动加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UPDATE&lt;/td&gt;
&lt;td&gt;排他锁&lt;/td&gt;
&lt;td&gt;自动加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;排他锁&lt;/td&gt;
&lt;td&gt;自动加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT&lt;/td&gt;
&lt;td&gt;不加锁&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT &amp;hellip; LOCK IN SHARE MODE&lt;/td&gt;
&lt;td&gt;共享锁&lt;/td&gt;
&lt;td&gt;手动加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT &amp;hellip; FOR UPDATE&lt;/td&gt;
&lt;td&gt;排他锁&lt;/td&gt;
&lt;td&gt;手动加锁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1、对唯一索引进行检索，就是行锁。&lt;/p&gt;
&lt;p&gt;2、对没有索引的条件进行检索，会升级为表锁。&lt;/p&gt;
&lt;p&gt;3、索引上进行等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁。&lt;/p&gt;
&lt;p&gt;4、索引上进行等值查询（普通索引），向右遍历到最后一个值都不满足查询需求时，next-key lock 退化为间隙。&lt;/p&gt;
&lt;p&gt;5、索引上进行范围查询（唯一索引），会访问直到不满足条件的第一个值为止。&lt;/p&gt;
&lt;h2 id=&#34;innodb-引擎&#34;&gt;InnoDB 引擎&lt;/h2&gt;
&lt;h3 id=&#34;逻辑存储结构&#34;&gt;逻辑存储结构&lt;/h3&gt;
&lt;p&gt;TableSpace &amp;raquo;&amp;gt; Segment &amp;raquo;&amp;gt; Extent &amp;raquo;&amp;gt; Page &amp;raquo;&amp;gt; ROW&lt;/p&gt;
&lt;p&gt;表空间（ibd文件）：一个 MySQL 实例可以对应多个表空间，用于存储记录、索引等数据。&lt;/p&gt;
&lt;p&gt;段：数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment）、InnoDB 是索引组织表，数据段就是 B+ 树的叶子节点，索引段为 B+ 树的非叶子几点。段用来管理区。&lt;/p&gt;
&lt;p&gt;区：表空间的单元结构，每个区大小为 1M。默认情况，InnoDB 存储引擎页大小为 16k，即一个区中一共有 64个 连续的页。&lt;/p&gt;
&lt;p&gt;页：InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。&lt;/p&gt;
&lt;p&gt;行：InnoDB 存储引擎数据是按行进行存放的。&lt;/p&gt;
&lt;p&gt;Trx_id：每次对某条记录进行改动时，都会把对应的事务 id 赋值给 trx_id 隐藏列。&lt;/p&gt;
&lt;p&gt;Roll_pointer：每次对某条引记录改动时，都会把旧版本写入到 undo 日志中，然后这个隐藏列就相当于一个指针，可以通过它找到该记录修改前的信息。&lt;/p&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;内存架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buffer Pool&lt;/strong&gt;：缓冲池是主内存中的一个区域，缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若没有数据，则从磁盘加载并缓冲），然后以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。&lt;/p&gt;
&lt;p&gt;缓冲池以 Page 页为单位，底层采用链表数据结构管理 Page。根据状态，将Page分为三种类型：free page 空闲页，没使用过；clean page 被使用过，但数据未修改；dirty page 脏页，就是被使用过也被修改过，与磁盘中的数据产生了不一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change Buffer&lt;/strong&gt;：更改缓冲区（针对于二级索引页），在执行 DML 语句，如果数据没有在 Buffer Pool中，不会直接操作磁盘，而是将数据变更后的内容存在更改缓冲区 Change Buffer中，在未来数据被读取时，再将数据合并恢复到 Buffer Pool中，再将合并后的数据刷新到磁盘中。&lt;/p&gt;
&lt;p&gt;因为二级索引是非唯一的，并且插入顺序是相对随机的，如果要对其更改每次操作都要依赖磁盘，这样会造成大量的磁盘 IO，有了 ChangeBuffer 后，我们可以在缓冲池汇总进行合并处理，减少磁盘 IO。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adaptive Hash Index&lt;/strong&gt;：自适应 hash 索引，用于优化对 Buffer Pool 数据的查询。InnoDB 存储引擎会监控对表上各索引页的查询，如果观察到 Hash 索引可以提升速度，则建立 Hash 索引，称之为自适应 Hash 索引。参数：&lt;code&gt;adaptive_hash_index&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Log Buffer&lt;/strong&gt;：日志缓冲区，用来保护要写入到磁盘中的 log 日志数据（redo log、undo log），默认大小为 16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除多行的事务，增加日志缓冲区的大小可以节省磁盘 IO。参数：&lt;code&gt;innodb_log_buffer_size&lt;/code&gt;、&lt;code&gt;innodb_flush_log_at_trx_commit&lt;/code&gt;。1：日志在每次事务提交时写入并刷新到磁盘；0：每秒将日志写入并刷新到磁盘一次；2：日志在每次事务提交后写入，并每秒刷新到磁盘一次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;磁盘结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;System TableSapce&lt;/strong&gt;：系统表空间是更改缓冲区的存储区域。如果表是在系统空间而不是每个表文件或通用表空间创建的，它也可能包含表和索引数据。参数：&lt;code&gt;innodb_data_file_path&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File-Per-Table Tablespace&lt;/strong&gt;：每个表的文件表空间包含单个 InnoDB 表的数据和索引，并存储在文件系统上的单个数据文件。参数：&lt;code&gt;innodb_file_per_table&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General Tablespaces&lt;/strong&gt;：通用表空间，需要通过 CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建表空间
CREATE TABLESPACE xxx ADD 
DATAFILE &#39;file_name&#39;
ENGINE = engine_name;
# 创建表
CREATE TABLE xxx TABLESPACE ts_name;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Undo TableSpaces&lt;/strong&gt;：撤销表空间，MySQL 实例在初始化时会自动创建两个默认的 undo 表空间（初始大小16M），用于存储undo log日志。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Temporay Tablespaces&lt;/strong&gt;：InnoDB 使用会话临时表空间和全局临时表空间。存储用户创建的临时表数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doublewrite Buffer Files&lt;/strong&gt;：双写缓冲区，InnoDB 引擎将数据页从 Buffer Pool 刷新到磁盘前，线将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redo Log&lt;/strong&gt;：重写日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log），前者是在内存中，后者在磁盘中。当事务提交后会把所有修改信息都会存到日志中，用于在刷新脏页到磁盘时，发生错误时，进行数据恢复使用。循环写入重做日志文件，涉及两个文件：ib_logfile0、ib_logfile1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后台线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Master Thread&lt;/strong&gt;：核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中，保持数据的一致性，还包括脏页的刷新、合并插入缓冲、undo页的回收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IO Thread&lt;/strong&gt;：AIO负责IO请求的回调。Read thread （4）、Write thread（4）、Log thread（1）、Insert buffer thread（1）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SHOW ENGINE innodb status;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Purge Thread&lt;/strong&gt;：主要用于回收事务已经提交了的undo log，在事务提交后，undo log可能不用了，就用它来回收。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Page Cleaner Thread&lt;/strong&gt;：协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻塞。&lt;/p&gt;
&lt;h3 id=&#34;事务原理&#34;&gt;事务原理&lt;/h3&gt;
&lt;p&gt;事务就是一组操作的集合，将所有操作视作是一个整体向系统提交，若是其中某个操作失败了，就会执行回滚操作。&lt;/p&gt;
&lt;p&gt;事务具有 ACID 的特性：&lt;/p&gt;
&lt;p&gt;原子性，就是事务不可分割，要么全部执行成功，要么全部执行失败。&lt;/p&gt;
&lt;p&gt;一致性，事务完成时，必须让所有数据保持一致性。&lt;/p&gt;
&lt;p&gt;隔离性，事务不受外部并发操作影响。&lt;/p&gt;
&lt;p&gt;持久性，事务一旦提交或回滚，数据的改变就是永久的。&lt;/p&gt;
&lt;p&gt;原子性 - undo log&lt;/p&gt;
&lt;p&gt;持久性 - redo log&lt;/p&gt;
&lt;p&gt;一致性 - undo log + redo log&lt;/p&gt;
&lt;p&gt;隔离性 - 锁 + MVCC&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redo&lt;/strong&gt;：重做日志，记录的是事务提交时数据页的物理修改，用来实现事务的持久性。&lt;/p&gt;
&lt;p&gt;该日志文件由两部分组成，重做日志缓冲（redo log buffer）、重做日志文件（redo log file）。前者是在内存中，后者在磁盘中，当事务提交后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;undo&lt;/strong&gt;：回滚日志，用于记录数据被修改前的信息，包括提交回滚和MVCC（多版本并发控制）。undo log 和 redo log 记录物理日志不一样，他是逻辑日志。也就是当用户执行一次 delete 记录时，undo log 会记录一条 insert 记录，以方便回滚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;undo log 销毁&lt;/strong&gt;：undo log 在事务执行时产生，事务提交时，不会立刻删除 undo log，因为这些日志还用于 MVCC。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;undo log 存储&lt;/strong&gt;：undo log 采用段方式进行管理和记录，存放在前面介绍 rollback segment 回滚段中，内部包含 1024 个 undo log segment。&lt;/p&gt;
&lt;h3 id=&#34;mvcc&#34;&gt;MVCC&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;当前读&lt;/strong&gt;：读取记录的最新版本，读取时保证其他并发事务不能修改当前记录，会对读取记录进行加锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快照读&lt;/strong&gt;：简单的 select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read Committed：每次 select 都生成一个快照读。&lt;/li&gt;
&lt;li&gt;Repetabel Read：开启事务后第一个 select 语句是快照读。&lt;/li&gt;
&lt;li&gt;Serializable：快照读退化为当前读。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MVCC&lt;/strong&gt;：Multi-Version Concurrency Control，多版本并发控制。也就是维护一个数据的多个版本，使得读写操作没有冲突，快照读为 MySQL 实现 MVCC 提供了一个非阻塞读功能。MVCC 的具体实现，依赖数据库记录中的三个隐式字段、undo log日志、readView。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隐藏字段&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB_TRX_ID 最近修改事务ID，记录插入这条记录或最后一次修改为该记录的事务ID。&lt;/li&gt;
&lt;li&gt;DB_ROLL_PTR 回滚指针，指向这条记录的上个版本，用于配合 undo log，指向上个版本。&lt;/li&gt;
&lt;li&gt;DB_ROW_ID 隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;undo log&lt;/strong&gt;：回滚日志，在 insert、update、delete 时产生便于数据回滚的日志。当 insert 的时候，产生的 undo log 日志只在回滚时需要，在事务提交后，可被立即删除。而 update、delete 的时候，产生的 undo log 日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。&lt;/p&gt;
&lt;p&gt;不同事务或相同事务对同一条记录修改，会导致该记录的 undo log 生成一条记录版本链表，链表头部是最新的旧记录，链表尾部是最早的旧记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readview&lt;/strong&gt;：读视图，是快照读SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m_ids 当前活跃的事务ID集合。&lt;/li&gt;
&lt;li&gt;min_trx_id 最小活跃事务ID。&lt;/li&gt;
&lt;li&gt;max_trx_id 预分配事务ID，当前最大事务ID+1。&lt;/li&gt;
&lt;li&gt;creator_trx_id ReadView 创建者事务ID。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;版本链数据访问规则：&lt;/p&gt;
&lt;p&gt;READ COMMITED：在事务中每一次执行快照读时生成ReadView。&lt;/p&gt;
&lt;p&gt;REPEATABLE READ：仅在事务第一次执行汇快照读时生成ReadView，后续复用该 ReadView。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TRX_ID == CREATOR_TRX_ID（✓）- 数据是当前事务更改的。&lt;/li&gt;
&lt;li&gt;TRX_ID &amp;lt; MIN_TRX_ID（✓）- 说明数据已经提交了。&lt;/li&gt;
&lt;li&gt;TRX_ID &amp;gt; MAX_TRX_ID（×）- 说明事务是在 ReadView 生产后才开启。&lt;/li&gt;
&lt;li&gt;MIN_TRX_ID &amp;lt;= TRX_ID &amp;lt;= MAX_TRX_ID（不在集合中可访问）- 说明数据已经提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-管理&#34;&gt;MySQL 管理&lt;/h2&gt;
&lt;h3 id=&#34;系统数据库&#34;&gt;系统数据库&lt;/h3&gt;
&lt;p&gt;MySQL 自带四个数据库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql 存储 MySQL 服务器正常运行所需要的各种信息 （时区、主从、用户、权限等）。&lt;/li&gt;
&lt;li&gt;information_schema 提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等。&lt;/li&gt;
&lt;li&gt;performance_schema 为 MySQL 服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数。&lt;/li&gt;
&lt;li&gt;sys 包含了一系列方便 DBA 和开发人员利用 performance_schema 性能数据库进行性能调优和诊断的视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用工具&#34;&gt;常用工具&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;MySQL 客户端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法：mysql [options] [database]&lt;/p&gt;
&lt;p&gt;选项：-u, &amp;ndash;user=name&lt;/p&gt;
&lt;p&gt;​			-p,&amp;ndash;password[=name]&lt;/p&gt;
&lt;p&gt;​			-h,&amp;ndash;host=name&lt;/p&gt;
&lt;p&gt;​			-p,&amp;ndash;port=port&lt;/p&gt;
&lt;p&gt;​			-e,&amp;ndash;excute=name&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysql -uroot -p123456 db01 -e &amp;quot;select * from stu*&amp;quot;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mysqladmin&lt;/strong&gt;：执行管理操作的客户端程序，用它来检查服务器的配置和当前状态、创建并删除数据库等。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysqladmin -uroot -p123456 drop &#39;test01&#39;

mysqladmin -uroot -p123456 version


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mysqlbinlog&lt;/strong&gt;：由服务器生成对二进制日志文件以二进制格式保存，如果想要检查这些文本格式，就会用到该日志管理工具&lt;/p&gt;
&lt;p&gt;语法：mysqlbinlog [options] log-files1 log-file2&lt;/p&gt;
&lt;p&gt;选项：-d,&amp;ndash;database=name	指定数据库名称，只列出指定的数据库相关操作&lt;/p&gt;
&lt;p&gt;​			-o,&amp;ndash;offset=#	忽略日志中的前n行命令&lt;/p&gt;
&lt;p&gt;​			-r,&amp;ndash;result-file=name	将输出的文本格式日志输出到指定文件&lt;/p&gt;
&lt;p&gt;​			-s,&amp;ndash;short-form	显示简单格式，省略掉一些信息&lt;/p&gt;
&lt;p&gt;​			-v	将行事件（数据变更）重构为 SQL 语句&lt;/p&gt;
&lt;p&gt;​			-vv	将行事件（数据变更）重构为 SQL 语句，并输出注释信息&lt;/p&gt;
&lt;p&gt;​			&amp;ndash;start-datetime=date1 &amp;ndash;stop-datetime=date2	指定日期间隔内的所有日志&lt;/p&gt;
&lt;p&gt;​			&amp;ndash;start-position=pos1 &amp;ndash;stop-position=pos2	指定位置间隔内的所有日志&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mysqlshow&lt;/strong&gt;：mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。&lt;/p&gt;
&lt;p&gt;语法：mysqlshow [options] [db_name [table_name [col_name]]]&lt;/p&gt;
&lt;p&gt;选项：&amp;ndash;count	显示数据库及表的统计信息（数据库，表均可以不指定）&lt;/p&gt;
&lt;p&gt;​			-i	显示指定数据库或者执行表的状态信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 查询每个数据库的表的数量以及表中记录的数量
mysqlshow -uroot -p1234 --count

# 查询 test 库中每个表的字段数，以及行数
mysqlshow -uroot -p1234 test --count

# 查询 test 库中 book 表的详细情况
mysqlshow -uroot -p1234 test book --count


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mysqldump&lt;/strong&gt;：用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，以及插入表的 SQL 语句。&lt;/p&gt;
&lt;p&gt;语法：mysqldump [options] db_name [tables]&lt;/p&gt;
&lt;p&gt;​			mysqldump [options] &amp;ndash;database/-B db1 [db2 db3 &amp;hellip;]&lt;/p&gt;
&lt;p&gt;​			mysqldump [options] &amp;ndash;all-database/-A&lt;/p&gt;
&lt;p&gt;连接选项：-u,&amp;ndash;user=name&lt;/p&gt;
&lt;p&gt;​					-p,&amp;ndash;password[=name]&lt;/p&gt;
&lt;p&gt;​					-h,&amp;ndash;host=name&lt;/p&gt;
&lt;p&gt;​					-p,&amp;ndash;port=#&lt;/p&gt;
&lt;p&gt;输出选项：&amp;ndash;add-drop-database	在每个数据库创建语句前加上 drop database&lt;/p&gt;
&lt;p&gt;​					&amp;ndash;add-drop-table	在表创建语句前加上 drop table&lt;/p&gt;
&lt;p&gt;​					-n,&amp;ndash;no-create-db	不包含数据库的创建&lt;/p&gt;
&lt;p&gt;​					-t,&amp;ndash;no-create-info	不包含数据表的创建&lt;/p&gt;
&lt;p&gt;​					-d,&amp;ndash;no-data	不包含数据&lt;/p&gt;
&lt;p&gt;​					-T,&amp;ndash;tab-name	自动生成两个文件，一个.sql文件，创建表结构;一个.txt文件，数据文件。（&lt;code&gt;show variables liek &#39;%secure_file_priv;&#39;&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mysqlimport/soucre&lt;/strong&gt;：数据导入工具，用来导入 mysqldump -T 导出的文本文件。&lt;/p&gt;
&lt;p&gt;语法：mysqlimport [options] db_name textfile1 [textfile2 &amp;hellip;]&lt;/p&gt;
&lt;p&gt;​			source /root/xxxx.sql&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source /root/test.sql
mysqlimport -uroot -p1234 test /tmp/city.txt


&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;运维篇&#34;&gt;运维篇&lt;/h1&gt;
&lt;h2 id=&#34;日志&#34;&gt;日志&lt;/h2&gt;
&lt;h3 id=&#34;错误日志&#34;&gt;错误日志&lt;/h3&gt;
&lt;p&gt;错误日志记录了 mysqld 启动和停止时，以及在运行过程中发生任何错误时的相关信息。该日志默认开启，存放目录为 &lt;code&gt;/var/log/&lt;/code&gt;，默认日志文件名&lt;code&gt;mysqld.log&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查看日志文件地址
SHOW VARIABLES LIKE &#39;%log_error%&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二进制日志&#34;&gt;二进制日志&lt;/h3&gt;
&lt;p&gt;二进制日志（BINLOG）记录了所有 DDL 和 DML 语句，但不包含 DQL 语句。&lt;/p&gt;
&lt;p&gt;作用：灾难时的数据恢复；MySQL 主从复制&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查看日志文件地址
SHOW VARIABLES LIKE &#39;%log_bin&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MySQL 提供了多种格式来记录二进制日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STATEMENT - 基于 SQL 语句的日志记录，记录的是 SQL 语句，对数据进行修改的 SQL 都会记录在日志文件中。&lt;/li&gt;
&lt;li&gt;ROW - 基于行的日志记录，记录的是每一行的数据。&lt;/li&gt;
&lt;li&gt;MIXED - 混合了 STATEMENT 和 ROW 两种格式，默认采用 STATEMENT，在某些特殊情况下会自动切换为 ROW 进行记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查看格式
SHOW VARIABLES LIKE &#39;%binlog_format%&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;日志删除方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reset master	删除全部 binlog 日志，删除后，日志编号，将从 binlog.000001 重新开始&lt;/li&gt;
&lt;li&gt;purge master logs to &amp;lsquo;binlog.xxxxxx&amp;rsquo;    删除 xxxxxx 编号之前的所有日志&lt;/li&gt;
&lt;li&gt;purge master logs before &amp;lsquo;yyyy-mm-dd hh24:mi:ss&amp;rsquo;    删除日志为 &amp;lsquo;yyyy-mm-dd hh24:mi:ss&amp;rsquo; 之前产生的所有日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在 MySQL 配置文件 /etc/my.cnf 中配置二进制日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SHOW VARIABLES LIKE &#39;%binlog_expire_logs_seconds%&#39;;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查询日志&#34;&gt;查询日志&lt;/h3&gt;
&lt;p&gt;查询日志记录了客户端所有操作语句，而二进制日志不包含数据的 SQL 语句。默认情况下，查询日志是未开启的。如果需要开启查询日志，可以设置配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 查询 general_log 是否开启
SHOW VARIABLES LIKE &#39;%general%&#39;;

# 在配置中开启查询日志
general_log = 1

# 设置文件名默认为 host_name.log
general_log_file = mysql_query.log


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;慢查询日志&#34;&gt;慢查询日志&lt;/h3&gt;
&lt;p&gt;慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录不小于 min_examined_row_limit 的所有 SQL 语句日志，默认未开启。long_query_time 默认为 10 秒，最小为 0，精度可到微秒。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 慢查询日志
slow_query_log = 1

# 执行时间参数
long_query_time = 2


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认情况下，不会记录管理语句，也不会记录不使用索引进行查找的查询。可以使用 log_slow_admin_statements 和更改此行为 log_queries_not_using_indexes。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 记录执行较慢的管理语句
log_slow_admin_statements = 1

# 记录执行较慢的未使用索引的语句
log_queries_not_using_indexs = 1


&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;主从复制&#34;&gt;主从复制&lt;/h2&gt;
&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;
&lt;p&gt;主从复制就是将数据库的 DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。&lt;/p&gt;
&lt;p&gt;MySQL 支持一台主库同时向多台从库进行复制，从库同时也可以作为其他从服务器的主库，实现链状复制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.主库出现问题，可以快速切换到从库提供服务。&lt;/li&gt;
&lt;li&gt;2.实现读写分离，降低主库的访问压力。&lt;/li&gt;
&lt;li&gt;3.可以在从库中执行备份，以避免备份期间影响主库服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;1、Master 主库提交事务时，会将数据变更记录在二进制日志文件 Binlog 中。&lt;/p&gt;
&lt;p&gt;2、从库读取主库的二进制文件 Binlog ，写入到从库的中继日志 Replay Log。&lt;/p&gt;
&lt;p&gt;3、slave 重做中继日志中的事件，将改变反映它自己的数据。&lt;/p&gt;
&lt;h3 id=&#34;搭建&#34;&gt;搭建&lt;/h3&gt;
&lt;p&gt;服务器准备：&lt;/p&gt;
&lt;p&gt;192.168.200.200（master）&lt;/p&gt;
&lt;p&gt;192.168.200.201（slave）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 开放指定 3306 端口号
firewall-cmd --zone=public --add-port=3306/tcp -permanent
firewall-cmd -reload

# 关闭服务器防火墙
systemctl stop firewalld
systemctl diable firewalld


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主库配置：&lt;/p&gt;
&lt;p&gt;1、修改配置文件 /etc/my.cnf&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# mysql 服务器 ID，确保集群中唯一
server-id = 1

# 是否只读，1 代表只读，0代表读写
read-only = 0

# 忽略的数据，指不需要同步的数据库
# binlog-ignore-db = mysql

# 指定同步的数据库
# binlog-do-db = db01


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、重启 MySQL 服务器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl restart mysqld


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3、登录 MySQL，创建远程连接账号，并授予主从复制权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建用户
CREATE USER &#39;master&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root@123456&#39;;

# 分配主从复制权限
GRANT REPLICATION SLAVE ON *.* TO &#39;master&#39;@&#39;%&#39;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4、查看二进制日志坐标&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;/*
	file 从哪个日志文件开始推送
	postions 从哪个位置开始推送
	binlog_ignore_db 指定不需要同步的数据库
*/
SHOW MASTER STATUS;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从库配置：&lt;/p&gt;
&lt;p&gt;1、修改配置文件 /etc/my.cnf&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 设置服务器 ID
server-id = 2

# 是否只读
read-only = 1


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、重启 MySQL&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl mysql restart


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3、登录 MySQL，设置主库配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CHANGE REPLICATION SOURCE TO SOURCE_HOST=&#39;xxx.xxx&#39;,SOURCE_USER=&#39;xxx&#39;,SOURCE_PASSWORD=&#39;xxx&#39;,SOURCE_LOG_FILE=&#39;xxx&#39;,SOURCE_LOG_POS=xxx;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4、开启同步操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;START REPLICA;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5、查看主从同步状态&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SHOW REPLICA STATUS;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
